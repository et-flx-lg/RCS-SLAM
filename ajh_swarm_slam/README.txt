Author: Adam Hoburg
Date: 09 May 2024

The purpose here is to provide some insight into the structure of the code in this repository. This work was from my Master's Thesis titled "RCS-SLAM: Range of Communication Swarm SLAM" which was defended April 2024. This work was also detailed in a similarly titled paper that was submitted to IROS 2024. 

Please refer to this README file for information on the folders here except for the optimization folder. I've provided a separate README inside that folder to explain its contents. Thank you and please don't hesitate to reach out with questions: adam.j.hoburg@gmail.com.

Overall the purpose of this work was to generate a simulation to show that we could develop a SLAM algorithm for simple swarming agents that reduced estimation uncertainty using only the knowledge of which robots were in communication with each other at a given node in their pose graph based upon on the known effective communication range between agents. This approach was tested in twenty minute simulations of twenty differential drive robots in a ROS 1 Gazebo environment. Each agent generated a pose graph with knowledge of which agents it was communicating with at each node. We then introduced inequality constraints between agents at those nodes when optimizing the pose graph using the common GTSAM SLAM optimization library. The simulations were tested under three different motion control strategies and the optimization outcome was evaluated at three different sensor noise levels.

'controllers' folder: This folder contains the scripts for the three different motion control strategies I tested. These are very custom and rely on three different levels of 'global' information to make control decisions. The intent here was just to test different emergent swarm behaviors, not invent swarm controllers. In swarm_controller_joy.py the agents know their bearing and range to a leader and they also are all listening to joystick commands. The agents are trying to avoid collision and stay within 2m of the leader. In swarm_leader_follower.py the leader is listening to the joystick and the rest know their bearing and range to that leader. The agents are avoiding collision and trying to stay within 2m of the leader. Finally, swarm_random.py the agents are completely independent just avoiding collision. The script swarm_team.py wasn't discussed in any publication but this approach assigned multiple leaders so broke the swarm into smaller teams exploring randomly. This approach didn't provide any additional insight to the SLAM strategy.

'include' folder: Contains custom GTSAM constraints that I didn't end up using. I had better results with GTSAM's organic range constraint.

'launch' folder: Contains the launch files necessary to simulate RCS-SLAM. Optimization is all done offline after data is collected by rosbags. File diff_drive_20bot_RCS_SLAM.launch would be used for creating a new simulation. Pay attention to all of the available parameters. The replays allow you to use that data to test the same simulation under different noise conditions.

'scripts' folder: This folder includes the additional scripts that the simulations rely on. The node_gen.y node_gen_stationary.py scripts are run as sub-nodes to the each individual agents. These listen to the output from the noisy odometry nodes and create a pose graph by placing nodes at the desired time interval. Default is set to 3 seconds. The noisy odometry nodes rely on the create_noisy_odom.py script that can be found in the uri_soft repository under generic_diff_drive_motion. The script called swarm_graph.py is a critical component that is constantly monitoring the simulation and determining 1) which agents are communicating in the communication graph and 2) which agents are directly in front of others for the robot finder sensor. The communication graph is published and recorded by a rosbag at the time of each node placement. The robot finder sensor is constantly published and listened to by each agent that relies on the information to determine if an object in its field of view is a robot or not. This information is used to label nodes where 'unnavigable' regions are detected to develop a sparse map of the environment.

'src' folder: This folder includes the c++ code for actually performing the optimization. The RCS_PGO_20bots.cpp script produces an optimized estimate using RCS-SLAM and DR_PGO_20bots.cpp produces an estimate using direct ranging as a comparison with previous work. These can be compiled and run after the data from a simulation is post-processed using the scripts found in the 'optimization' folder. Please refer to the README in that folder for additional guidance.

